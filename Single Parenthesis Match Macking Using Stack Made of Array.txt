#include <stdio.h>
#include <stdlib.h>
struct stack
{
    int size;
    int top;
    char *arr;
};
 
int isempty(struct stack *ptr)
{
    if (ptr->top == -1)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
 
int isfull(struct stack *ptr)
{
    if (ptr->top == ptr->size - 1)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
 
void push(struct stack* ptr, char val){
    if(isfull(ptr)){
        printf("Stack Overflow! Cannot push %d to the stack\n", val);
    }
    else{
        ptr->top++;
        ptr->arr[ptr->top] = val;
    }
}
 
char pop(struct stack* ptr){
    if(isempty(ptr)){
        printf("Stack Underflow! Cannot pop from the stack\n");
        return -1;
    }
    else{
        char val = ptr->arr[ptr->top];
        ptr->top--;
        return val;
    }
}
 
int parenthesis(char *e)
{
    struct stack *t=(struct stack*)malloc(sizeof(struct stack));
    t->size=10;
    t->top=-1;
    t->arr=(char*)malloc(t->size*sizeof(char));
    for (int i = 0; e[i]!='\0'; i++)
    {
        if(e[i]=='('){
            push(t, '(');
        }
        else if(e[i]==')'){
            if(isempty(t)){
                return 0;
            }
            pop(t); 
        }
    }
 
    if(isempty(t))
    {
        return 1;
    }
    else{
        return 0;
    }
    
}
int main()
{
    char *e = "((8)(*--$$9))";
    if(parenthesis(e)){
        printf("The parenthesis is matching");
    }
    else{
        printf("The parenthesis is not matching");
    }
    return 0;
}
