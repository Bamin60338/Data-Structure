#include <stdio.h>
#include <stdlib.h>
struct stack
{
    int size;
    int top;
    char *arr;
};
int isfull(struct stack *a)
{
    if(a->top==a->size-1)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
int isempty(struct stack *a)
{
    if(a->top==-1)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
void push(struct stack *a,char data)
{
if(isfull(a))
{
        printf("Stack Overflow! Cannot push %d to the stack\n", data);
}
else
{
    a->top++;
    a->arr[a->top]=data;
}
}
char pop(struct stack *a)
{
  if(isempty(a))
    {
        printf("Stack Underflow! Cannot pop from the stack\n");
        return -1;
    }
    else
{
    char x;
    x=a->arr[a->top];
    a->top--;
    return x;
}
}
int match(char a, char b){
    if(a=='{' && b=='}'){
        return 1;
    }
    if(a=='(' && b==')'){
        return 1;
    }
    if(a=='[' && b==']'){
        return 1;
    }
  return 0;  
}
int parenthesismactch(char *e)
{
   struct stack *par=(struct stack*)malloc(sizeof(struct stack));
   par->size=20;
   par->top=-1;
   par->arr=(char*)malloc(par->size*sizeof(char));
   char popped_char;
   for(int i=0;e[i]!='\0';i++)
   {
       if(e[i]=='('||e[i]=='['||e[i]=='{')
       {
           push(par,e[i]);
       }
       else if(e[i]==')'||e[i]==']'||e[i]=='}')
       {
           if(isempty(par))
           {
               return 0;
           }
           else
           {
             popped_char=pop(par);
             
           }
           if(!match(popped_char,e[i]))
           {
               return 0;
           }
       }
   }
   if(isempty(par))
   {
       return 1;
   }
   else
   {
       return 0;
   }
}
int main()
{
    char *e = "()[]{}";
    if(parenthesismactch(e)){
        printf("The parenthesis is matching");
    }
    else{
        printf("The parenthesis is not matching");
    }
    return 0;
}